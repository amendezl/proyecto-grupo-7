service: sistema-gestion-espacios

frameworkVersion: '3'

custom:
  configValidationMode: warn
  
  # === FRONTEND DEPLOYMENT CONFIGURATION ===
  client:
    bucketName: ${self:service}-frontend-${self:provider.stage}
    distributionFolder: ../frontend/out
    indexDocument: index.html
    errorDocument: 404.html
    region: ${self:provider.region}
    createDistribution: true
    manageResources: false
    uploadConcurrency: 5
  
  # === SPLIT STACKS FOR LARGE DEPLOYMENTS ===
  splitStacks:
    nested: true
    perFunction: false
    perType: true
    stackType:
      AWS::ApiGatewayV2::Api: false
      AWS::ApiGatewayV2::Stage: false
      AWS::CloudFormation::Stack: false
  
  # === ENVIRONMENT-SPECIFIC SETTINGS ===
  stages:
    dev:
      logLevel: INFO
      tracing: false
      memorySize: 256
    staging:
      logLevel: WARN
      tracing: true
      memorySize: 512
    prod:
      logLevel: ERROR
      tracing: true
      memorySize: 1024
  
  # === AUTOMATION HOOKS ===
  scriptable:
    hooks:
      # PRE-DEPLOYMENT: Setup infrastructure
      before:aws:deploy:deploy:createStack:
        - echo "==> Deploying base infrastructure..."
        - node ../infrastructure/deploy-infrastructure.js ${self:provider.stage}
      
      # FRONTEND BUILD & DEPLOYMENT
      after:aws:deploy:deploy:checkForChanges:
        - echo "==> Building frontend..."
        - cd ../frontend && npm ci
        - echo "==> Injecting environment variables..."
        - cd ../frontend && echo "NEXT_PUBLIC_API_URL=https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com" > .env.production.local
        - cd ../frontend && echo "NEXT_PUBLIC_WS_URL=wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}" >> .env.production.local
        - cd ../frontend && echo "NEXT_PUBLIC_STAGE=${self:provider.stage}" >> .env.production.local
        - cd ../frontend && echo "NEXT_PUBLIC_AWS_REGION=${self:provider.region}" >> .env.production.local
        - cd ../frontend && npm run build
        - cd ../frontend && npm run export
      
      # POST-DEPLOYMENT: Frontend upload and seeding
      after:deploy:deploy:
        - echo "==> Uploading frontend to S3..."
        - npx serverless client deploy
        - echo "==> Seeding database..."
        - DYNAMODB_TABLE=${self:service}-${self:provider.stage}-main node scripts/seed-dynamodb.js --stage ${self:provider.stage} --yes
        - echo "==> Running chaos engineering smoke tests..."
        - cd ../chaos-engineering && npm ci && npm run start -- --smoke-test
      
      # CLEANUP
      before:remove:remove:
        - echo "==> Removing frontend assets..."
        - npx serverless client remove

plugins:
  - serverless-finch
  - serverless-split-stacks
  - serverless-scriptable-plugin

provider:
  name: aws
  runtime: nodejs22.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  environment:
    # === CORE ENVIRONMENT ===
    NODE_ENV: ${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}
    
    # === AUTHENTICATION ===
    JWT_SECRET: ${env:JWT_SECRET, '${self:service}-${self:provider.stage}-jwt-secret'}
    COGNITO_USER_POOL_ID: { Ref: CognitoUserPool }
    COGNITO_CLIENT_ID: { Ref: CognitoUserPoolClient }
    
    # === DATABASE ===
    MAIN_TABLE: { Ref: MainDynamoDBTable }
    CONNECTIONS_TABLE: { Ref: WebSocketConnectionsTable }
    CIRCUIT_STATE_TABLE: { Ref: CircuitStateTable }
    
    # === MESSAGING ===
    MAIN_QUEUE_URL: { Ref: MainQueue }
    DLQ_URL: { Ref: DeadLetterQueue }
    
    # === SNS TOPICS ===
    SPACE_NOTIFICATIONS_TOPIC: { Ref: SpaceNotificationsTopic }
    SYSTEM_ALERTS_TOPIC: { Ref: SystemAlertsTopic }
    ADMIN_NOTIFICATIONS_TOPIC: { Ref: AdminNotificationsTopic }
    
    # === WEBSOCKET ===
    WEBSOCKET_ENDPOINT: 
      Fn::Sub: "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}"
    
    # === MONITORING (SaaS) ===
    SENTRY_DSN: ${env:SENTRY_DSN, ''}
    SENTRY_TRACES_SAMPLE_RATE: ${env:SENTRY_TRACES_SAMPLE_RATE, '0.1'}
    SENTRY_ENVIRONMENT: ${self:provider.stage}
    
    # === FRONTEND ASSETS ===
    FRONTEND_BUCKET: { Ref: FrontendBucket }
    CLOUDFRONT_DISTRIBUTION: { Ref: CloudFrontDistribution }
  
  iam:
    role: arn:aws:iam::${env:AWS_ACCOUNT_ID, '975050051149'}:role/LabRole
  
  logs:
    httpApi: true
  
  httpApi:
    cors: true
    authorizers:
      cognitoJwt:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: 
          Fn::Sub: "https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}"
        audience:
          - Ref: CognitoUserPoolClient

package:
  individually: false
  excludeDevDependencies: true
  patterns:
    - '!node_modules/**'
    - '!tests/**'
    - '!coverage/**'
    - '!*.test.js'
    - '!.git/**'
    - '!docs/**'
    - 'src/**'
    - 'scripts/**'

functions:
  # === CORE AUTHENTICATION ===
  login:
    handler: src/handlers/auth.login
    timeout: 10
    memorySize: ${self:custom.stages.${self:provider.stage}.memorySize}
    events:
      - httpApi:
          path: /auth/login
          method: post
          cors: true

  register:
    handler: src/handlers/auth.register
    timeout: 10
    memorySize: ${self:custom.stages.${self:provider.stage}.memorySize}
    events:
      - httpApi:
          path: /auth/register
          method: post
          cors: true

  refreshToken:
    handler: src/handlers/auth.refreshToken
    timeout: 5
    memorySize: ${self:custom.stages.${self:provider.stage}.memorySize}
    events:
      - httpApi:
          path: /auth/refresh
          method: post
          cors: true

  # === HEALTH & MONITORING ===
  healthCheck:
    handler: src/handlers/healthCheck.handler
    timeout: 5
    memorySize: 128
    events:
      - httpApi:
          path: /health
          method: get
          cors: true

  # === DEVOPS AUTOMATION AS LAMBDA ===
  devopsAutomation:
    handler: src/handlers/devops.automation
    timeout: 300
    memorySize: 512
    events:
      - schedule: 
          rate: rate(60 minutes)
          description: "DevOps automation tasks"
      - httpApi:
          path: /devops/automation
          method: post
          cors: true
          authorizer:
            name: cognitoJwt
    environment:
      DEVOPS_MODE: automation

  # === CHAOS ENGINEERING AS LAMBDA ===
  chaosEngineering:
    handler: src/handlers/chaos.resilience
    timeout: 30
    memorySize: 256
    events:
      - httpApi:
          path: /chaos/test
          method: post
          cors: true
          authorizer:
            name: cognitoJwt
      - httpApi:
          path: /chaos/proxy
          method: any
          cors: true
    environment:
      CHAOS_MODE: testing
      CHAOS_TARGET_URL: 
        Fn::Sub: "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"

  # === CORE BUSINESS LOGIC ===
  # Usuarios
  getUsers:
    handler: src/handlers/usuarios.getUsers
    timeout: 10
    memorySize: ${self:custom.stages.${self:provider.stage}.memorySize}
    events:
      - httpApi:
          path: /users
          method: get
          cors: true
          authorizer:
            name: cognitoJwt

  createUser:
    handler: src/handlers/usuarios.createUser
    timeout: 10
    memorySize: ${self:custom.stages.${self:provider.stage}.memorySize}
    events:
      - httpApi:
          path: /users
          method: post
          cors: true
          authorizer:
            name: cognitoJwt

  # Espacios
  getEspacios:
    handler: src/handlers/espacios.getEspacios
    timeout: 10
    memorySize: ${self:custom.stages.${self:provider.stage}.memorySize}
    events:
      - httpApi:
          path: /espacios
          method: get
          cors: true
          authorizer:
            name: cognitoJwt

  createEspacio:
    handler: src/handlers/espacios.createEspacio
    timeout: 10
    memorySize: ${self:custom.stages.${self:provider.stage}.memorySize}
    events:
      - httpApi:
          path: /espacios
          method: post
          cors: true
          authorizer:
            name: cognitoJwt

  # Reservas
  getReservas:
    handler: src/handlers/reservas.getReservas
    timeout: 10
    memorySize: ${self:custom.stages.${self:provider.stage}.memorySize}
    events:
      - httpApi:
          path: /reservas
          method: get
          cors: true
          authorizer:
            name: cognitoJwt

  createReserva:
    handler: src/handlers/reservas.createReserva
    timeout: 15
    memorySize: ${self:custom.stages.${self:provider.stage}.memorySize}
    events:
      - httpApi:
          path: /reservas
          method: post
          cors: true
          authorizer:
            name: cognitoJwt

  # === WEBSOCKET REAL-TIME ===
  websocketConnect:
    handler: src/handlers/websocket.connect.connect
    timeout: 10
    memorySize: 256
    events:
      - websocket:
          route: $connect

  websocketDisconnect:
    handler: src/handlers/websocket.disconnect.disconnect
    timeout: 10
    memorySize: 256
    events:
      - websocket:
          route: $disconnect

  websocketDefault:
    handler: src/handlers/websocket.default.default
    timeout: 10
    memorySize: 256
    events:
      - websocket:
          route: $default

  # === QUEUE WORKERS ===
  queueWorker:
    handler: src/handlers/queueWorker.handler
    timeout: 60
    memorySize: 512
    events:
      - sqs:
          arn: { Fn::GetAtt: [MainQueue, Arn] }
          batchSize: 10
          maximumBatchingWindow: 5

  # === SNS EVENT PROCESSORS ===
  notificationProcessor:
    handler: src/handlers/sns.handler
    timeout: 30
    memorySize: 256
    events:
      - sns:
          arn: { Ref: SpaceNotificationsTopic }
      - sns:
          arn: { Ref: SystemAlertsTopic }

  # === MISSING BUSINESS HANDLERS ===
  # Dashboard Analytics
  getDashboardMetrics:
    handler: src/handlers/dashboard.getDashboardMetrics
    timeout: 30
    events:
      - http:
          path: /dashboard/metrics
          method: get
          cors: true

  getDashboardStats:
    handler: src/handlers/dashboard.getDashboardStats
    timeout: 30
    events:
      - http:
          path: /dashboard/stats
          method: get
          cors: true

  # Responsables Management
  getResponsables:
    handler: src/handlers/responsables.getResponsables
    timeout: 30
    events:
      - http:
          path: /responsables
          method: get
          cors: true

  getResponsable:
    handler: src/handlers/responsables.getResponsable
    timeout: 30
    events:
      - http:
          path: /responsables/{id}
          method: get
          cors: true

  createResponsable:
    handler: src/handlers/responsables.createResponsable
    timeout: 30
    events:
      - http:
          path: /responsables
          method: post
          cors: true

  updateResponsable:
    handler: src/handlers/responsables.updateResponsable
    timeout: 30
    events:
      - http:
          path: /responsables/{id}
          method: put
          cors: true

  deleteResponsable:
    handler: src/handlers/responsables.deleteResponsable
    timeout: 30
    events:
      - http:
          path: /responsables/{id}
          method: delete
          cors: true

  # Zonas Management
  getZonas:
    handler: src/handlers/zonas.getZonas
    timeout: 30
    events:
      - http:
          path: /zonas
          method: get
          cors: true

  getZona:
    handler: src/handlers/zonas.getZona
    timeout: 30
    events:
      - http:
          path: /zonas/{id}
          method: get
          cors: true

  createZona:
    handler: src/handlers/zonas.createZona
    timeout: 30
    events:
      - http:
          path: /zonas
          method: post
          cors: true

  updateZona:
    handler: src/handlers/zonas.updateZona
    timeout: 30
    events:
      - http:
          path: /zonas/{id}
          method: put
          cors: true

  deleteZona:
    handler: src/handlers/zonas.deleteZona
    timeout: 30
    events:
      - http:
          path: /zonas/{id}
          method: delete
          cors: true

  # DynamoDB Stream Processor (CRITICAL)
  dynamoStreamProcessor:
    handler: src/handlers/dynamoStreamProcessor.handler
    timeout: 60
    memorySize: 512
    events:
      - stream:
          type: dynamodb
          arn: { Fn::GetAtt: [MainDynamoDBTable, StreamArn] }
          batchSize: 10
          startingPosition: LATEST
          filterPatterns:
            - eventName: [INSERT, MODIFY, REMOVE]

  # Alternative Cognito Authentication
  cognitoLogin:
    handler: src/handlers/cognitoAuth.login
    timeout: 30
    events:
      - http:
          path: /auth/cognito/login
          method: post
          cors: true

  cognitoRegister:
    handler: src/handlers/cognitoAuth.register
    timeout: 30
    events:
      - http:
          path: /auth/cognito/register
          method: post
          cors: true

  cognitoRefresh:
    handler: src/handlers/cognitoAuth.refreshToken
    timeout: 30
    events:
      - http:
          path: /auth/cognito/refresh
          method: post
          cors: true

resources:
  # === FRONTEND INFRASTRUCTURE ===
  Resources:
    # S3 Bucket for frontend
    FrontendBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-frontend-${self:provider.stage}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: 404.html

    # CloudFront Distribution
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !GetAtt FrontendBucket.RegionalDomainName
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity: ""
          Enabled: true
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed-CachingOptimized
          PriceClass: PriceClass_100
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html

    # === VPC INFRASTRUCTURE (OPTIONAL FOR ADVANCED DEPLOYMENT) ===
    # VPC Main
    ProjectVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsHostnames: true
        EnableDnsSupport: true
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-vpc

    # Internet Gateway
    ProjectIGW:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-igw

    AttachIGW:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: { Ref: ProjectIGW }
        VpcId: { Ref: ProjectVPC }

    # Public Subnets
    PublicSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: { Ref: ProjectVPC }
        CidrBlock: 10.0.0.0/24
        AvailabilityZone: !Select [0, !GetAZs ""]
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-public-a

    PublicSubnetB:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: { Ref: ProjectVPC }
        CidrBlock: 10.0.1.0/24
        AvailabilityZone: !Select [1, !GetAZs ""]
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-public-b

    # Private Subnets for Lambda
    PrivateSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: { Ref: ProjectVPC }
        CidrBlock: 10.0.10.0/24
        AvailabilityZone: !Select [0, !GetAZs ""]
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-private-a

    PrivateSubnetB:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: { Ref: ProjectVPC }
        CidrBlock: 10.0.11.0/24
        AvailabilityZone: !Select [1, !GetAZs ""]
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-private-b

    # NAT Gateway (optional, for Lambda in VPC)
    NatEip:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc

    NatGateway:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: { Fn::GetAtt: [NatEip, AllocationId] }
        SubnetId: { Ref: PublicSubnetA }
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-nat

    # Route Tables
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: { Ref: ProjectVPC }
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-public-rt

    PublicRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: { Ref: PublicRouteTable }
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: { Ref: ProjectIGW }

    PublicSubnetAAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: { Ref: PublicSubnetA }
        RouteTableId: { Ref: PublicRouteTable }

    PublicSubnetBAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: { Ref: PublicSubnetB }
        RouteTableId: { Ref: PublicRouteTable }

    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: { Ref: ProjectVPC }
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-private-rt

    PrivateRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: { Ref: PrivateRouteTable }
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: { Ref: NatGateway }

    PrivateSubnetAAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: { Ref: PrivateSubnetA }
        RouteTableId: { Ref: PrivateRouteTable }

    PrivateSubnetBAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: { Ref: PrivateSubnetB }
        RouteTableId: { Ref: PrivateRouteTable }

    # Security Groups
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for Lambda functions
        VpcId: { Ref: ProjectVPC }
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-lambda-sg

    # === BACKEND INFRASTRUCTURE ===
    # Main DynamoDB Table
    MainDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-main
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    # WebSocket Connections Table
    WebSocketConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-connections
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    # Circuit Breaker State Table
    CircuitStateTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-circuit-state
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: serviceName
            AttributeType: S
        KeySchema:
          - AttributeName: serviceName
            KeyType: HASH

    # === MESSAGING INFRASTRUCTURE ===
    # Main Processing Queue
    MainQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-main-queue
        VisibilityTimeout: 300
        MessageRetentionPeriod: 1209600
        RedrivePolicy:
          deadLetterTargetArn: { Fn::GetAtt: [DeadLetterQueue, Arn] }
          maxReceiveCount: 3

    # Dead Letter Queue
    DeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-dlq
        MessageRetentionPeriod: 1209600

    # === SNS TOPICS ===
    SpaceNotificationsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-space-notifications
        DisplayName: Space Management Notifications

    SystemAlertsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-system-alerts
        DisplayName: System Alerts

    AdminNotificationsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-admin-notifications
        DisplayName: Admin Notifications

    # === COGNITO AUTHENTICATION ===
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-client
        GenerateSecret: false
        UserPoolId: { Ref: CognitoUserPool }
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        AccessTokenValidity: 60
        IdTokenValidity: 60
        RefreshTokenValidity: 30
        TokenValidityUnits:
          AccessToken: minutes
          IdToken: minutes
          RefreshToken: days

    # === WEBSOCKET API ===
    WebSocketApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: ${self:service}-websocket-${self:provider.stage}
        ProtocolType: WEBSOCKET
        RouteSelectionExpression: "$request.body.action"

    WebSocketStage:
      Type: AWS::ApiGatewayV2::Stage
      Properties:
        ApiId: { Ref: WebSocketApi }
        StageName: ${self:provider.stage}
        AutoDeploy: true

    # === MONITORING & ALERTING ===
    # CloudWatch Dashboard
    MonitoringDashboard:
      Type: AWS::CloudWatch::Dashboard
      Properties:
        DashboardName: ${self:service}-${self:provider.stage}-monitoring
        DashboardBody: !Sub |
          {
            "widgets": [
              {
                "type": "metric",
                "properties": {
                  "metrics": [
                    ["AWS/Lambda", "Duration", "FunctionName", "${self:service}-${self:provider.stage}-login"],
                    ["AWS/Lambda", "Errors", "FunctionName", "${self:service}-${self:provider.stage}-login"]
                  ],
                  "period": 300,
                  "stat": "Average",
                  "region": "${AWS::Region}",
                  "title": "Lambda Performance"
                }
              }
            ]
          }

  # === OUTPUTS ===
  Outputs:
    # Frontend
    FrontendBucketName:
      Value: { Ref: FrontendBucket }
      Export:
        Name: ${self:service}-${self:provider.stage}-frontend-bucket

    CloudFrontDistributionId:
      Value: { Ref: CloudFrontDistribution }
      Export:
        Name: ${self:service}-${self:provider.stage}-cloudfront-id

    # Backend API
    HttpApiUrl:
      Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
      Export:
        Name: ${self:service}-${self:provider.stage}-api-url

    WebSocketUrl:
      Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}"
      Export:
        Name: ${self:service}-${self:provider.stage}-websocket-url

    # Authentication
    CognitoUserPoolId:
      Value: { Ref: CognitoUserPool }
      Export:
        Name: ${self:service}-${self:provider.stage}-user-pool-id

    CognitoClientId:
      Value: { Ref: CognitoUserPoolClient }
      Export:
        Name: ${self:service}-${self:provider.stage}-client-id