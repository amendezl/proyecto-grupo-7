service: sistema-gestion-espacios
frameworkVersion: '3'
configValidationMode: warn

custom:
  # FIXED: Plugins now loaded conditionally via external JS file
  splitStacks:
    nested: true
    perFunction: false
    perType: true
    stackType:
      AWS::ApiGatewayV2::Api: false
      AWS::ApiGatewayV2::Stage: false
  client:
    bucketName: ${env:S3_BUCKET_NAME, '${self:service}-frontend-${self:provider.stage}'}
    distributionFolder: ../frontend/out                # Carpeta generada por next export
    indexDocument: index.html
    errorDocument: index.html
    region: ${env:AWS_REGION, '${self:provider.region}'}
    createDistribution: true
  scriptable:
    hooks:
      after:deploy:deploy:
        - cd ../frontend/out || true
        - cd ..
        - node ../scripts/deploy-frontend-backend.js --hook

plugins: ${file(./serverless-plugins.js)}

provider:
  name: aws
  runtime: nodejs22.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  environment:
    QUEUE_URL: { Ref: MyQueue }
    DB_TYPE: dynamodb
    # DynamoDB Tables - Using Refs to connect with Resources
    DYNAMODB_TABLE: { Ref: DynamoDBTable }
    TABLE_NAME: { Ref: DynamoDBTable }
    CONNECTIONS_TABLE: { Ref: WebSocketConnectionsTable }
    CIRCUIT_STATE_TABLE: { Ref: CircuitStateTable }
    # Cognito Configuration - Using Refs to connect with Resources
    USER_POOL_ID: { Ref: CognitoUserPool }
    USER_POOL_CLIENT_ID: { Ref: CognitoUserPoolClient }
    COGNITO_USER_POOL_ID: { Ref: CognitoUserPool }
    JWT_SECRET: ${env:JWT_SECRET, '${self:service}-${self:provider.stage}-jwt-secret'}
    NODE_ENV: ${self:provider.stage}
    # Optional SaaS monitoring (Sentry)
    SENTRY_DSN: ${env:SENTRY_DSN, ''}
    SENTRY_TRACES_SAMPLE_RATE: ${env:SENTRY_TRACES_SAMPLE_RATE, '0'}
    SENTRY_RELEASE: ${env:SENTRY_RELEASE, ''}
    # SNS Topics - Using Refs to connect with Resources
    SNS_TOPIC_ARN: { Ref: SpaceNotificationsTopic }
    SNS_ALERTS_TOPIC_ARN: { Ref: SystemAlertsTopic }
    SNS_ADMIN_TOPIC_ARN: { Ref: AdminNotificationsTopic }
    SNS_PERSONALIZATION_TOPIC_ARN: { Ref: PersonalizationUpdatesTopic }
    # WebSocket Configuration - Using Refs to connect with Resources
    WEBSOCKET_ENDPOINT:
      Fn::Join:
        - ''
        - - 'wss://'
          - Ref: WebSocketApi
          - '.execute-api.'
          - Ref: 'AWS::Region'
          - '.amazonaws.com/'
          - ${self:provider.stage}
  iam:
    role:
      name: ${self:service}-${self:provider.stage}-lambda-role
      managedPolicies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      statements:
        - Effect: Allow
          Action:
            - sqs:*
          Resource: "*"
        - Effect: Allow
          Action:
            - sns:*
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource: "*"
        - Effect: Allow
          Action:
            - cognito-idp:*
          Resource: "*"
        - Effect: Allow
          Action:
            - execute-api:*
          Resource: "*"
  logs:
    httpApi: true
  tracing:
    lambda: true
  timeout: 29
  memorySize: 512
  architecture: arm64
  httpApi:
    cors: true
    authorizers:
      cognitoJwt:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Sub:
            - https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}
            - { UserPoolId: { Ref: CognitoUserPool } }
        audience:
          - { Ref: CognitoUserPoolClient }

functions:
  # Autenticación con Cognito - Optimizado para móviles
  login:
    handler: src/api/auth/cognitoAuth.login
    timeout: 10
    memorySize: 256
    events:
      - httpApi:
          method: POST
          path: /api/auth/login

  refresh:
    handler: src/api/auth/cognitoAuth.refresh
    timeout: 8
    memorySize: 256
    events:
      - httpApi:
          method: POST
          path: /api/auth/refresh

  me:
    handler: src/api/auth/cognitoAuth.me
    timeout: 5
    memorySize: 256
    events:
      - httpApi:
          method: GET
          path: /api/me
          authorizer:
            name: cognitoJwt

  # Endpoints originales con autorización de Cognito
  logout:
    handler: src/api/auth/auth.logout
    events:
      - httpApi:
          method: POST
          path: /api/auth/logout
          authorizer:
            name: cognitoJwt

  register:
    handler: src/api/auth/auth.register
    events:
      - httpApi:
          method: POST
          path: /api/auth/register

  # === GESTIÓN DE PERSONALIZACIÓN (COMPONENTE SAAS) ===
  
  # Configuración global del cliente
  getClientGlobalConfig:
    handler: src/api/integrations/personalization.getClientGlobalConfig
    events:
      - httpApi:
          method: GET
          path: /api/personalization/client/{clientId}/global
          authorizer:
            name: cognitoJwt

  updateClientGlobalConfig:
    handler: src/api/integrations/personalization.updateClientGlobalConfig
    events:
      - httpApi:
          method: PUT
          path: /api/personalization/client/{clientId}/global
          authorizer:
            name: cognitoJwt

  # Configuración específica del usuario
  getUserSpecificConfig:
    handler: src/api/integrations/personalization.getUserSpecificConfig
    events:
      - httpApi:
          method: GET
          path: /api/personalization/client/{clientId}/user/{userId}
          authorizer:
            name: cognitoJwt

  updateUserSpecificConfig:
    handler: src/api/integrations/personalization.updateUserSpecificConfig
    events:
      - httpApi:
          method: PUT
          path: /api/personalization/client/{clientId}/user/{userId}
          authorizer:
            name: cognitoJwt

  # Configuración completa (global + específica + externa)
  getCompleteUserConfig:
    handler: src/api/integrations/personalization.getCompleteUserConfig
    events:
      - httpApi:
          method: GET
          path: /api/personalization/client/{clientId}/user/{userId}/complete
          authorizer:
            name: cognitoJwt

  # Mecanismo de desacople - Carga configuración externa
  loadExternalConfig:
    handler: src/api/integrations/personalization.loadExternalConfig
    events:
      - httpApi:
          method: POST
          path: /api/personalization/client/{clientId}/load-external
          authorizer:
            name: cognitoJwt

  # Exportar configuración del cliente
  exportClientConfig:
    handler: src/api/integrations/personalization.exportClientConfig
    events:
      - httpApi:
          method: GET
          path: /api/personalization/client/{clientId}/export
          authorizer:
            name: cognitoJwt

  # WebSocket handlers for real-time personalization updates
  wsConnect:
    handler: src/api/integrations/websocket.connect
    events:
      - websocket:
          route: $connect
  wsDisconnect:
    handler: src/api/integrations/websocket.disconnect
    events:
      - websocket:
          route: $disconnect
  wsDefault:
    handler: src/api/integrations/websocket.default
    events:
      - websocket:
          route: $default

  # SNS -> WebSocket forwarder
  personalizationForwarder:
    handler: src/api/integrations/personalizationForwarder.handler
    events:
      - sns:
          topicName: PersonalizationUpdatesTopic
          arn:
            Ref: PersonalizationUpdatesTopic

  # DynamoDB Streams processor to capture all table changes and publish personalization updates
  dynamoStreamProcessor:
    handler: src/api/system/dynamoStreamProcessor.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - DynamoDBTable
              - StreamArn
          batchSize: 100
          startingPosition: LATEST

  # Limpiar cache de configuraciones
  clearConfigurationCache:
    handler: src/api/integrations/personalization.clearConfigurationCache
    events:
      - httpApi:
          method: POST
          path: /api/personalization/cache/clear
          authorizer:
            name: cognitoJwt

  # Configuración por industria
  getIndustryConfig:
    handler: src/api/integrations/personalization.getIndustryConfig
    events:
      - httpApi:
          method: GET
          path: /api/personalization/industries/{industry}/config
          authorizer:
            name: cognitoJwt

  # Dashboard con protección Cognito - Optimizado para móviles
  dashboard:
    handler: src/api/system/dashboard.getDashboard
    timeout: 15
    memorySize: 1024
    events:
      - httpApi:
          method: GET
          path: /api/dashboard
          authorizer:
            name: cognitoJwt

  estadisticasDetalladas:
    handler: src/api/system/dashboard.getEstadisticasDetalladas
    timeout: 20
    memorySize: 1024
    events:
      - httpApi:
          method: GET
          path: /api/dashboard/estadisticas
          authorizer:
            name: cognitoJwt

  # Espacios con protección Cognito - Optimizado para móviles
  getEspacios:
    handler: src/api/business/espacios.getEspacios
    timeout: 12
    memorySize: 512
    events:
      - httpApi:
          method: GET
          path: /api/espacios
          authorizer:
            name: cognitoJwt

  getEspacio:
    handler: src/api/business/espacios.getEspacio
    events:
      - httpApi:
          method: GET
          path: /api/espacios/{id}
          authorizer:
            name: cognitoJwt

  createEspacio:
    handler: src/api/business/espacios.createEspacio
    events:
      - httpApi:
          method: POST
          path: /api/espacios
          authorizer:
            name: cognitoJwt

  updateEspacio:
    handler: src/api/business/espacios.updateEspacio
    events:
      - httpApi:
          method: PUT
          path: /api/espacios/{id}
          authorizer:
            name: cognitoJwt

  deleteEspacio:
    handler: src/api/business/espacios.deleteEspacio
    events:
      - httpApi:
          method: DELETE
          path: /api/espacios/{id}
          authorizer:
            name: cognitoJwt

  estadisticasEspacios:
    handler: src/api/business/espacios.getEstadisticasEspacios
    events:
      - httpApi:
          method: GET
          path: /api/espacios/estadisticas
          authorizer:
            name: cognitoJwt

  # Reservas con protección Cognito
  getReservas:
    handler: src/api/business/reservas.getReservas
    events:
      - httpApi:
          method: GET
          path: /api/reservas
          authorizer:
            name: cognitoJwt

  getReserva:
    handler: src/api/business/reservas.getReserva
    events:
      - httpApi:
          method: GET
          path: /api/reservas/{id}
          authorizer:
            name: cognitoJwt

  createReserva:
    handler: src/api/business/reservas.createReserva
    events:
      - httpApi:
          method: POST
          path: /api/reservas
          authorizer:
            name: cognitoJwt

  updateReserva:
    handler: src/api/business/reservas.updateReserva
    events:
      - httpApi:
          method: PUT
          path: /api/reservas/{id}
          authorizer:
            name: cognitoJwt

  cancelReserva:
    handler: src/api/business/reservas.cancelReserva
    events:
      - httpApi:
          method: PATCH
          path: /api/reservas/{id}/cancel
          authorizer:
            name: cognitoJwt

  deleteReserva:
    handler: src/api/business/reservas.deleteReserva
    events:
      - httpApi:
          method: DELETE
          path: /api/reservas/{id}
          authorizer:
            name: cognitoJwt

  estadisticasReservas:
    handler: src/api/business/reservas.getEstadisticasReservas
    events:
      - httpApi:
          method: GET
          path: /api/reservas/estadisticas
          authorizer:
            name: cognitoJwt

  # Usuarios con protección Cognito
  getUsuarios:
    handler: src/api/business/usuarios.getUsuarios
    events:
      - httpApi:
          method: GET
          path: /api/usuarios
          authorizer:
            name: cognitoJwt

  getUsuario:
    handler: src/api/business/usuarios.getUsuario
    events:
      - httpApi:
          method: GET
          path: /api/usuarios/{id}
          authorizer:
            name: cognitoJwt

  createUsuario:
    handler: src/api/business/usuarios.createUsuario
    events:
      - httpApi:
          method: POST
          path: /api/usuarios
          authorizer:
            name: cognitoJwt

  updateUsuario:
    handler: src/api/business/usuarios.updateUsuario
    events:
      - httpApi:
          method: PUT
          path: /api/usuarios/{id}
          authorizer:
            name: cognitoJwt

  deleteUsuario:
    handler: src/api/business/usuarios.deleteUsuario
    events:
      - httpApi:
          method: DELETE
          path: /api/usuarios/{id}
          authorizer:
            name: cognitoJwt

  toggleUsuarioEstado:
    handler: src/api/business/usuarios.toggleUsuarioEstado
    events:
      - httpApi:
          method: PATCH
          path: /api/usuarios/{id}/toggle
          authorizer:
            name: cognitoJwt

  getPerfilActual:
    handler: src/api/business/usuarios.getPerfilActual
    events:
      - httpApi:
          method: GET
          path: /api/usuarios/perfil
          authorizer:
            name: cognitoJwt

  updatePerfilActual:
    handler: src/api/business/usuarios.updatePerfilActual
    events:
      - httpApi:
          method: PUT
          path: /api/usuarios/perfil
          authorizer:
            name: cognitoJwt

  cambiarPassword:
    handler: src/api/business/usuarios.cambiarPassword
    events:
      - httpApi:
          method: POST
          path: /api/usuarios/cambiar-password
          authorizer:
            name: cognitoJwt

  # Responsables con protección Cognito
  getResponsables:
    handler: src/api/business/responsables.getResponsables
    events:
      - httpApi:
          method: GET
          path: /api/responsables
          authorizer:
            name: cognitoJwt

  getResponsable:
    handler: src/api/business/responsables.getResponsable
    events:
      - httpApi:
          method: GET
          path: /api/responsables/{id}
          authorizer:
            name: cognitoJwt

  createResponsable:
    handler: src/api/business/responsables.createResponsable
    events:
      - httpApi:
          method: POST
          path: /api/responsables
          authorizer:
            name: cognitoJwt

  updateResponsable:
    handler: src/api/business/responsables.updateResponsable
    events:
      - httpApi:
          method: PUT
          path: /api/responsables/{id}
          authorizer:
            name: cognitoJwt

  deleteResponsable:
    handler: src/api/business/responsables.deleteResponsable
    events:
      - httpApi:
          method: DELETE
          path: /api/responsables/{id}
          authorizer:
            name: cognitoJwt

  toggleResponsableEstado:
    handler: src/api/business/responsables.toggleResponsableEstado
    events:
      - httpApi:
          method: PATCH
          path: /api/responsables/{id}/toggle
          authorizer:
            name: cognitoJwt

  getResponsablesPorArea:
    handler: src/api/business/responsables.getResponsablesPorArea
    events:
      - httpApi:
          method: GET
          path: /api/responsables/area/{area}
          authorizer:
            name: cognitoJwt

  getEspaciosAsignados:
    handler: src/api/business/responsables.getEspaciosAsignados
    events:
      - httpApi:
          method: GET
          path: /api/responsables/{id}/espacios
          authorizer:
            name: cognitoJwt

  asignarEspacio:
    handler: src/api/business/responsables.asignarEspacio
    events:
      - httpApi:
          method: POST
          path: /api/responsables/{id}/asignar-espacio
          authorizer:
            name: cognitoJwt

  estadisticasResponsables:
    handler: src/api/business/responsables.getEstadisticasResponsables
    events:
      - httpApi:
          method: GET
          path: /api/responsables/estadisticas
          authorizer:
            name: cognitoJwt

  # Zonas con protección Cognito
  getZonas:
    handler: src/api/business/zonas.getZonas
    events:
      - httpApi:
          method: GET
          path: /api/zonas
          authorizer:
            name: cognitoJwt

  getZona:
    handler: src/api/business/zonas.getZona
    events:
      - httpApi:
          method: GET
          path: /api/zonas/{id}
          authorizer:
            name: cognitoJwt

  createZona:
    handler: src/api/business/zonas.createZona
    events:
      - httpApi:
          method: POST
          path: /api/zonas
          authorizer:
            name: cognitoJwt

  updateZona:
    handler: src/api/business/zonas.updateZona
    events:
      - httpApi:
          method: PUT
          path: /api/zonas/{id}
          authorizer:
            name: cognitoJwt

  deleteZona:
    handler: src/api/business/zonas.deleteZona
    events:
      - httpApi:
          method: DELETE
          path: /api/zonas/{id}
          authorizer:
            name: cognitoJwt

  toggleZonaEstado:
    handler: src/api/business/zonas.toggleZonaEstado
    events:
      - httpApi:
          method: PATCH
          path: /api/zonas/{id}/toggle
          authorizer:
            name: cognitoJwt

  getZonasPorPiso:
    handler: src/api/business/zonas.getZonasPorPiso
    events:
      - httpApi:
          method: GET
          path: /api/zonas/piso/{piso}
          authorizer:
            name: cognitoJwt

  getEspaciosZona:
    handler: src/api/business/zonas.getEspaciosZona
    events:
      - httpApi:
          method: GET
          path: /api/zonas/{id}/espacios
          authorizer:
            name: cognitoJwt

  estadisticasZonas:
    handler: src/api/business/zonas.getEstadisticasZonas
    events:
      - httpApi:
          method: GET
          path: /api/zonas/estadisticas
          authorizer:
            name: cognitoJwt

  getPisosDisponibles:
    handler: src/api/business/zonas.getPisosDisponibles
    events:
      - httpApi:
          method: GET
          path: /api/zonas/pisos
          authorizer:
            name: cognitoJwt

  getEdificiosDisponibles:
    handler: src/api/business/zonas.getEdificiosDisponibles
    events:
      - httpApi:
          method: GET
          path: /api/zonas/edificios
          authorizer:
            name: cognitoJwt

  # === ENDPOINTS MÓVILES OPTIMIZADOS ===
  
  # Dashboard móvil optimizado
  getMobileDashboard:
    handler: src/api/integrations/mobile.getMobileDashboard
    timeout: 8
    memorySize: 512
    events:
      - httpApi:
          method: GET
          path: /api/mobile/dashboard
          authorizer:
            name: cognitoJwt

  # Espacios optimizados para móvil
  getMobileSpaces:
    handler: src/api/integrations/mobile.getMobileSpaces
    timeout: 10
    memorySize: 512
    events:
      - httpApi:
          method: GET
          path: /api/mobile/spaces
          authorizer:
            name: cognitoJwt

  # Reservas del usuario optimizadas para móvil
  getMobileReservations:
    handler: src/api/integrations/mobile.getMobileReservations
    timeout: 8
    memorySize: 256
    events:
      - httpApi:
          method: GET
          path: /api/mobile/reservations
          authorizer:
            name: cognitoJwt

  # Crear reserva optimizada para móvil
  createMobileReservation:
    handler: src/api/integrations/mobile.createMobileReservation
    timeout: 12
    memorySize: 512
    events:
      - httpApi:
          method: POST
          path: /api/mobile/reservations
          authorizer:
            name: cognitoJwt

  # Tipos de espacios para filtros móviles
  getSpaceTypes:
    handler: src/api/integrations/mobile.getSpaceTypes
    timeout: 5
    memorySize: 256
    events:
      - httpApi:
          method: GET
          path: /api/mobile/space-types
          authorizer:
            name: cognitoJwt

  # === ENDPOINTS ESPECÍFICOS PARA MODO VERTICAL (SIN SCROLL) ===
  
  # Dashboard ultra-compacto para modo vertical
  getVerticalDashboard:
    handler: src/api/system/vertical.getVerticalDashboard
    timeout: 6
    memorySize: 256
    events:
      - httpApi:
          method: GET
          path: /api/vertical/dashboard
          authorizer:
            name: cognitoJwt

  # Espacios paginados para modo vertical (sin scroll)
  getVerticalSpaces:
    handler: src/api/system/vertical.getVerticalSpaces
    timeout: 8
    memorySize: 256
    events:
      - httpApi:
          method: GET
          path: /api/vertical/spaces
          authorizer:
            name: cognitoJwt

  # Crear reserva optimizada para modo vertical
  createVerticalReservation:
    handler: src/api/system/vertical.createVerticalReservation
    timeout: 10
    memorySize: 256
    events:
      - httpApi:
          method: POST
          path: /api/vertical/reservations
          authorizer:
            name: cognitoJwt

  # === ENDPOINTS ESPECÍFICOS PARA MODO HORIZONTAL (SIN SCROLL) ===
  
  # Dashboard en columnas para modo horizontal
  getHorizontalDashboard:
    handler: src/api/system/horizontal.getHorizontalDashboard
    timeout: 10
    memorySize: 256
    events:
      - httpApi:
          method: GET
          path: /api/horizontal/dashboard
          authorizer:
            name: cognitoJwt

  # Grid de espacios para modo horizontal (2-3 columnas)
  getHorizontalSpaces:
    handler: src/api/system/horizontal.getHorizontalSpaces
    timeout: 8
    memorySize: 256
    events:
      - httpApi:
          method: GET
          path: /api/horizontal/spaces
          authorizer:
            name: cognitoJwt

  # Crear reserva con layout horizontal
  createHorizontalReservation:
    handler: src/api/system/horizontal.createHorizontalReservation
    timeout: 10
    memorySize: 256
    events:
      - httpApi:
          method: POST
          path: /api/horizontal/reservations
          authorizer:
            name: cognitoJwt

  # Worker para procesamiento asíncrono
  queueWorker:
    handler: src/api/system/queueWorker.process
    timeout: 30
    memorySize: 256
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ MyQueue, Arn ]
          batchSize: 10
          maximumBatchingWindow: 30

  # Endpoints de monitoreo de resiliencia (Retry + Circuit Breaker + Bulkhead)
  resilienceHealth:
    handler: src/api/system/healthCheck.getResilienceHealth
    events:
      - httpApi:
          method: GET
          path: /api/health/resilience

  completeResilienceHealth:
    handler: src/api/system/healthCheck.getCompleteResilienceHealth
    events:
      - httpApi:
          method: GET
          path: /api/health/resilience/complete

  bulkheadStatus:
    handler: src/api/system/healthCheck.getBulkheadStatus
    events:
      - httpApi:
          method: GET
          path: /api/health/bulkhead
          authorizer:
            name: cognitoJwt

  resetResilienceMetrics:
    handler: src/api/system/healthCheck.resetResilienceMetrics
    events:
      - httpApi:
          method: POST
          path: /api/health/resilience/reset
          authorizer:
            name: cognitoJwt

  resilienceConfiguration:
    handler: src/api/system/healthCheck.getResilienceConfiguration
    events:
      - httpApi:
          method: GET
          path: /api/health/resilience/config
          authorizer:
            name: cognitoJwt

  # === SNS NOTIFICATION FUNCTIONS ===
  
  # Envío de notificaciones de espacios
  sendSpaceNotification:
    handler: src/api/integrations/sns.sendSpaceNotification
    events:
      - httpApi:
          method: POST
          path: /api/notifications/spaces
          authorizer:
            name: cognitoJwt

  # Envío de alertas del sistema
  sendSystemAlert:
    handler: src/api/integrations/sns.sendSystemAlert
    events:
      - httpApi:
          method: POST
          path: /api/notifications/alerts
          authorizer:
            name: cognitoJwt

  # Notificaciones de administración
  sendAdminNotification:
    handler: src/api/integrations/sns.sendAdminNotification
    events:
      - httpApi:
          method: POST
          path: /api/notifications/admin
          authorizer:
            name: cognitoJwt

  # Procesar notificaciones SNS (triggered by SNS)
  processSpaceNotification:
    handler: src/api/integrations/sns.processSpaceNotification
    events:
      - sns:
          topicName: ${self:service}-${self:provider.stage}-space-notifications

  processSystemAlert:
    handler: src/api/integrations/sns.processSystemAlert
    events:
      - sns:
          topicName: ${self:service}-${self:provider.stage}-system-alerts

  processAdminNotification:
    handler: src/api/integrations/sns.processAdminNotification
    events:
      - sns:
          topicName: ${self:service}-${self:provider.stage}-admin-notifications

  # Suscripción a notificaciones
  subscribeToNotifications:
    handler: src/api/integrations/sns.subscribeToNotifications
    events:
      - httpApi:
          method: POST
          path: /api/notifications/subscribe
          authorizer:
            name: cognitoJwt

  # Listar suscripciones
  listSubscriptions:
    handler: src/api/integrations/sns.listSubscriptions
    events:
      - httpApi:
          method: GET
          path: /api/notifications/subscriptions
          authorizer:
            name: cognitoJwt

  # === WEBSOCKET FUNCTIONS FOR REAL-TIME ===
  
  # WebSocket connection management
  websocketConnect:
    handler: src/api/integrations/websocket.connect
    description: "Maneja nuevas conexiones WebSocket para tiempo real"
    timeout: 10
    memorySize: 256
    events:
      - websocket:
          route: $connect

  websocketDisconnect:
    handler: src/api/integrations/websocket.disconnect
    description: "Maneja desconexiones WebSocket"
    timeout: 8
    memorySize: 256
    events:
      - websocket:
          route: $disconnect

  websocketMessage:
    handler: src/api/integrations/websocket.message
    description: "Maneja mensajes WebSocket por defecto"
    timeout: 10
    memorySize: 256
    events:
      - websocket:
          route: $default

  # Real-time triggers from DynamoDB Streams
  realtimeReservaNotify:
    handler: src/api/integrations/websocket.notifyReserva
    description: "Notifica en tiempo real cuando se crean/modifican reservas"
    timeout: 15
    memorySize: 512
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [DynamoDBTable, StreamArn]
          batchSize: 10
          startingPosition: LATEST
          filterPatterns:
            - eventName: [INSERT, MODIFY]

  realtimeEspacioNotify:
    handler: src/api/integrations/websocket.notifyEspacioEstado
    description: "Notifica cuando cambia el estado de espacios"
    timeout: 15
    memorySize: 512
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [DynamoDBTable, StreamArn]
          batchSize: 10
          startingPosition: LATEST
          filterPatterns:
            - eventName: [MODIFY]

  # Manual stats update function
  realtimeStatsUpdate:
    handler: src/api/integrations/websocket.sendStats
    description: "Envía estadísticas actualizadas a todos los clientes WebSocket"
    timeout: 20
    memorySize: 1024
    events:
      - schedule: rate(5 minutes)
      - httpApi:
          method: POST
          path: /api/realtime/stats
          authorizer:
            name: cognitoJwt


package:
  individually: true
  excludeDevDependencies: true
  patterns:
    # Start from nothing, then include only what Lambda needs
    - '!**/*'
    # Source code and runtime manifests
    - 'src/**'
    - 'package.json'
    - 'package-lock.json'
    - 'serverless-plugins.js'
    # Runtime dependencies
    - 'node_modules/**'
    # Tests and docs remain excluded
    - '!**/*.md'
    - '!**/*.test.*'
  #   apiVersion: '2012-11-05'
  #   endpoint: http://localhost:4566  # LocalStack
  #   region: ${self:provider.region}
  #   accessKeyId: root
  #   secretAccessKey: root
  #   queues:
  #     - ${self:service}-${sls:stage}-queue

resources:
  Resources:
    MyQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-queue
        VisibilityTimeout: 60
        MessageRetentionPeriod: 1209600
    
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-table
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    # WebSocket Connections Table for real-time
    WebSocketConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: clientId
            AttributeType: S
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: clientId
            KeyType: HASH
          - AttributeName: connectionId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ConnectionIdIndex
            KeySchema:
              - AttributeName: connectionId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: StatusIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    
    # Circuit breaker state persistence (optional, small table)
    CircuitStateTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CIRCUIT_STATE_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: serviceName
            AttributeType: S
        KeySchema:
          - AttributeName: serviceName
            KeyType: HASH
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
            
    # ...existing backend resources...

    # WebSocket API Gateway
    WebSocketApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: ${self:service}-websocket-${self:provider.stage}
        ProtocolType: WEBSOCKET
        RouteSelectionExpression: "$request.body.action"

    # WebSocket Stage
    WebSocketStage:
      Type: AWS::ApiGatewayV2::Stage
      Properties:
        ApiId: !Ref WebSocketApi
        StageName: ${self:provider.stage}
        AutoDeploy: true

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true
        Schema:
          - Name: email
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: name
            AttributeDataType: String
            Required: false
            Mutable: true
          - Name: family_name
            AttributeDataType: String
            Required: false
            Mutable: true
          - Name: custom:role
            AttributeDataType: String
            Required: false
            Mutable: true

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-app
        GenerateSecret: false
        UserPoolId: { Ref: CognitoUserPool }
        PreventUserExistenceErrors: ENABLED
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
        AccessTokenValidity: 60
        IdTokenValidity: 60
        RefreshTokenValidity: 30
        TokenValidityUnits:
          AccessToken: minutes
          IdToken: minutes
          RefreshToken: days
        # Use Cognito defaults for Read/Write attributes (email, phone_number, etc.)
        # ReadAttributes and WriteAttributes removed to avoid invalid attribute errors

    # === SNS TOPICS ===
    
    # Topic para notificaciones de espacios (creación, actualización, asignación)
    SpaceNotificationsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-space-notifications-${sls:instanceId}
        DisplayName: Space Management Notifications

    # Topic para alertas del sistema (errores, mantenimiento, capacidad)
    SystemAlertsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-system-alerts-${sls:instanceId}
        DisplayName: System Alerts

    # Topic para notificaciones de administración (reports, backups, security)
    AdminNotificationsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-admin-notifications-${sls:instanceId}
        DisplayName: Admin Notifications

    # Topic for personalization updates
    PersonalizationUpdatesTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-personalization-updates-${sls:instanceId}
        DisplayName: Personalization Updates

    # === CLOUDWATCH ALARMS PARA MONITOREO MÓVIL ===
    
    # Alarma para errores de autenticación móvil
    MobileAuthErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-mobile-auth-errors
        AlarmDescription: Demasiados errores de autenticación desde móviles
        MetricName: Errors
        Namespace: AWS/Lambda
        Statistic: Sum
        Period: 300
        EvaluationPeriods: 2
        Threshold: 5
        ComparisonOperator: GreaterThanThreshold
        AlarmActions:
          - { Ref: SystemAlertsTopic }
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-login

    # Alarma para latencia alta en endpoints móviles
    MobileHighLatencyAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-mobile-high-latency
        AlarmDescription: Latencia alta en endpoints móviles
        MetricName: Duration
        Namespace: AWS/Lambda
        Statistic: Average
        Period: 300
        EvaluationPeriods: 2
        Threshold: 8000  # 8 segundos
        ComparisonOperator: GreaterThanThreshold
        AlarmActions:
          - { Ref: SystemAlertsTopic }
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-getMobileDashboard

    # Alarma para fallos en dashboard móvil
    MobileDashboardErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-mobile-dashboard-errors
        AlarmDescription: Errores en dashboard móvil
        MetricName: Errors
        Namespace: AWS/Lambda
        Statistic: Sum
        Period: 300
        EvaluationPeriods: 1
        Threshold: 3
        ComparisonOperator: GreaterThanThreshold
        AlarmActions:
          - { Ref: SystemAlertsTopic }
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-getMobileDashboard
        
  Outputs:
    QueueUrl:
      Value: { Ref: MyQueue }
      Description: "SQS Queue URL for async processing"
      Export:
        Name: ${self:service}-queue-url-${self:provider.stage}
    QueueArn:
      Value: { Fn::GetAtt: [ MyQueue, Arn ] }
      Description: "SQS Queue ARN"
      Export:
        Name: ${self:service}-queue-arn-${self:provider.stage}

    DynamoDBTable:
      Value: { Ref: DynamoDBTable }
      Description: "Main DynamoDB table name"
      Export:
        Name: ${self:service}-dynamodb-table-${self:provider.stage}
    DynamoDBTableArn:
      Value: { Fn::GetAtt: [ DynamoDBTable, Arn ] }
      Description: "Main DynamoDB table ARN"
      Export:
        Name: ${self:service}-dynamodb-table-arn-${self:provider.stage}
    DynamoDBStreamArn:
      Value: { Fn::GetAtt: [ DynamoDBTable, StreamArn ] }
      Description: "DynamoDB Stream ARN for real-time processing"
      Export:
        Name: ${self:service}-dynamodb-stream-arn-${self:provider.stage}
    
    ConnectionsTable:
      Value: { Ref: WebSocketConnectionsTable }
      Description: "WebSocket connections table name"
      Export:
        Name: ${self:service}-connections-table-${self:provider.stage}
    ConnectionsTableArn:
      Value: { Fn::GetAtt: [ WebSocketConnectionsTable, Arn ] }
      Description: "WebSocket connections table ARN"
      Export:
        Name: ${self:service}-connections-table-arn-${self:provider.stage}
    
    CircuitStateTable:
      Value: { Ref: CircuitStateTable }
      Description: "Circuit breaker state table name"
      Export:
        Name: ${self:service}-circuit-state-table-${self:provider.stage}
    CircuitStateTableArn:
      Value: { Fn::GetAtt: [ CircuitStateTable, Arn ] }
      Description: "Circuit breaker state table ARN"
      Export:
        Name: ${self:service}-circuit-state-table-arn-${self:provider.stage}
    
    # Cognito Authentication Resources
    UserPoolId:
      Value: { Ref: CognitoUserPool }
      Description: "Cognito User Pool ID for authentication"
      Export:
        Name: ${self:service}-user-pool-id-${self:provider.stage}
    UserPoolClientId:
      Value: { Ref: CognitoUserPoolClient }
      Description: "Cognito User Pool Client ID"
      Export:
        Name: ${self:service}-user-pool-client-id-${self:provider.stage}
    CognitoUserPoolArn:
      Value: { Fn::GetAtt: [ CognitoUserPool, Arn ] }
      Description: "Cognito User Pool ARN"
      Export:
        Name: ${self:service}-user-pool-arn-${self:provider.stage}
    # SNS Topics and Messaging Resources
    SpaceNotificationsTopic:
      Value: { Ref: SpaceNotificationsTopic }
      Description: "SNS Topic name for Space Notifications"
      Export:
        Name: ${self:service}-space-notifications-topic-${self:provider.stage}
    SpaceNotificationsTopicArn:
      Value: { Ref: SpaceNotificationsTopic }
      Description: "SNS Topic ARN for Space Notifications"
      Export:
        Name: ${self:service}-space-notifications-topic-arn-${self:provider.stage}
        
    SystemAlertsTopic:
      Value: { Ref: SystemAlertsTopic }
      Description: "SNS Topic name for System Alerts"
      Export:
        Name: ${self:service}-system-alerts-topic-${self:provider.stage}
    SystemAlertsTopicArn:
      Value: { Ref: SystemAlertsTopic }
      Description: "SNS Topic ARN for System Alerts"
      Export:
        Name: ${self:service}-system-alerts-topic-arn-${self:provider.stage}
        
    AdminNotificationsTopic:
      Value: { Ref: AdminNotificationsTopic }
      Description: "SNS Topic name for Admin Notifications"
      Export:
        Name: ${self:service}-admin-notifications-topic-${self:provider.stage}
    AdminNotificationsTopicArn:
      Value: { Ref: AdminNotificationsTopic }
      Description: "SNS Topic ARN for Admin Notifications"
      Export:
        Name: ${self:service}-admin-notifications-topic-arn-${self:provider.stage}
        
    PersonalizationUpdatesTopic:
      Value: { Ref: PersonalizationUpdatesTopic }
      Description: "SNS Topic name for Personalization Updates"
      Export:
        Name: ${self:service}-personalization-updates-topic-${self:provider.stage}
    PersonalizationUpdatesTopicArn:
      Value: { Ref: PersonalizationUpdatesTopic }
      Description: "SNS Topic ARN for Personalization Updates"
      Export:
        Name: ${self:service}-personalization-updates-topic-arn-${self:provider.stage}
    # WebSocket outputs
    WebSocketApiEndpoint:
      Value:
        Fn::Join:
          - ''
          - - 'wss://'
            - Ref: WebSocketApi
            - '.execute-api.'
            - Ref: 'AWS::Region'
            - '.amazonaws.com/'
            - ${self:provider.stage}
      Description: WebSocket API endpoint
    WebSocketApiUrl:
      Value:
        Fn::Join:
          - ''
          - - 'wss://'
            - Ref: WebSocketApi
            - '.execute-api.'
            - Ref: 'AWS::Region'
            - '.amazonaws.com/'
            - Ref: WebSocketStage
      Description: "WebSocket API Gateway URL for real-time connections"
      Export:
        Name: ${self:service}-websocket-url-${self:provider.stage}
    WebSocketApiId:
      Value: { Ref: WebSocketApi }
      Description: "WebSocket API Gateway ID"
      Export:
        Name: ${self:service}-websocket-api-id-${self:provider.stage}
    WebSocketConnectionsTable:
      Value: { Ref: WebSocketConnectionsTable }
      Description: "WebSocket connections table"
    WebSocketConnectionsTableArn:
      Value: { Fn::GetAtt: [ WebSocketConnectionsTable, Arn ] }
      Description: "WebSocket connections table ARN"
    # ...existing backend outputs...
