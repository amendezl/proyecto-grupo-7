AWSTemplateFormatVersion: '2010-09-09'
Description: 'Red segura y segmentación para Sistema de Gestión de Espacios (Defense-in-Depth)'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Entorno de despliegue

  ProjectName:
    Type: String
    Default: certamen3

  VPCCIDR:
    Type: String
    Default: 10.0.0.0/16

  PublicSubnetACIDR:
    Type: String
    Default: 10.0.0.0/24
  PublicSubnetBCIDR:
    Type: String
    Default: 10.0.1.0/24

  AppSubnetACIDR:
    Type: String
    Default: 10.0.10.0/24
  AppSubnetBCIDR:
    Type: String
    Default: 10.0.11.0/24

  DBSubnetACIDR:
    Type: String
    Default: 10.0.20.0/24
  DBSubnetBCIDR:
    Type: String
    Default: 10.0.21.0/24

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-vpc" }]

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-igw" }]

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetACIDR
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-public-a" }]

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetBCIDR
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-public-b" }]

  AppSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref AppSubnetACIDR
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-app-a" }]

  AppSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref AppSubnetBCIDR
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-app-b" }]

  DBSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref DBSubnetACIDR
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-db-a" }]

  DBSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref DBSubnetBCIDR
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-db-b" }]

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-public-rt" }]

  PublicRTDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  AssocPublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRT

  AssocPublicB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRT

  NatEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGw:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEip.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-nat" }]

  AppRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-app-rt" }]

  AppRTDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref AppRT
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGw

  AssocAppA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppSubnetA
      RouteTableId: !Ref AppRT

  AssocAppB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppSubnetB
      RouteTableId: !Ref AppRT

  DBRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-db-rt" }]

  DBRTDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref DBRT
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGw

  AssocDBA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DBSubnetA
      RouteTableId: !Ref DBRT

  AssocDBB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DBSubnetB
      RouteTableId: !Ref DBRT

  EndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for Interface Endpoints
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-vpce-sg" }]

  VPCEndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcEndpointType: Gateway
      RouteTableIds: [!Ref AppRT, !Ref DBRT]

  VPCEndpointSecrets:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      VpcEndpointType: Interface
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      PrivateDnsEnabled: true
      SubnetIds: [!Ref AppSubnetA, !Ref AppSubnetB]
      SecurityGroupIds: [!Ref EndpointSG]

  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB public ingress 443
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: HTTPS desde Internet
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-alb-sg" }]

  AppSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Backend only from ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: App port from ALB
          IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref ALBSG
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-app-sg" }]

  DBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DB only from App
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: DB from AppSG
          IpProtocol: tcp
          FromPort: 5432   # ajusta 3306 si usas MySQL
          ToPort: 5432
          SourceSecurityGroupId: !Ref AppSG
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-db-sg" }]

  AppNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-app-nacl" }]

  AppNACLInboundAllowEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 1024, To: 65535 }

  AppNACLInboundDenyTelnet:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: deny
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 23, To: 23 }

  AppNACLOutboundAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  AssocAppNaclA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref AppSubnetA
      NetworkAclId: !Ref AppNACL

  AssocAppNaclB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref AppSubnetB
      NetworkAclId: !Ref AppNACL

Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref VPC
  PublicSubnets:
    Description: Subredes públicas (perímetro)
    Value: !Join [",", [!Ref PublicSubnetA, !Ref PublicSubnetB]]
  AppSubnets:
    Description: Subredes privadas de aplicación
    Value: !Join [",", [!Ref AppSubnetA, !Ref AppSubnetB]]
  DBSubnets:
    Description: Subredes privadas de base de datos
    Value: !Join [",", [!Ref DBSubnetA, !Ref DBSubnetB]]
  ALBSGId:
    Description: SG del ALB
    Value: !Ref ALBSG
  AppSGId:
    Description: SG de la App
    Value: !Ref AppSG
  DBSGId:
    Description: SG de la DB
    Value: !Ref DBSG
