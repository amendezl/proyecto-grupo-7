AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infraestructura para el Sistema de Gestión de Espacios'

# PARAMETROS

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Entorno de despliegue

  DomainName:
    Type: String
    Default: hospital-espacios.example.com
    Description: Nombre de dominio para el frontend

  # RED Y SEGMENTACIÓN

  ProjectName:
    Type: String
    Default: certamen3
  VPCCIDR:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnetACIDR:
    Type: String
    Default: 10.0.0.0/24
  PublicSubnetBCIDR:
    Type: String
    Default: 10.0.1.0/24
  AppSubnetACIDR:
    Type: String
    Default: 10.0.10.0/24
  AppSubnetBCIDR:
    Type: String
    Default: 10.0.11.0/24
  DBSubnetACIDR:
    Type: String
    Default: 10.0.20.0/24
  DBSubnetBCIDR:
    Type: String
    Default: 10.0.21.0/24

# RECURSOS

Resources:

  # FRONTEND

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'hospital-espacios-frontend-${Environment}'
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: HospitalEspacios

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "OAC-${FrontendBucket}"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub "${FrontendBucket.RegionalDomainName}"
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        DefaultCacheBehavior:
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          DefaultTTL: 3600
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        Tags:
          - Key: Environment
            Value: !Ref Environment
          - Key: Project
            Value: HospitalEspacios

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "${FrontendBucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  # DYNAMODB
  
  EspaciosTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'hospital-espacios-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: tipo
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TipoIndex
          KeySchema:
            - AttributeName: tipo
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: HospitalEspacios

  WebSocketConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'hospital-ws-connections-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: HospitalEspacios

  # IAM

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'hospital-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt EspaciosTable.Arn
                  - !GetAtt WebSocketConnectionsTable.Arn
        - PolicyName: APIGatewayManagement
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*"

  # RED Y SEGMENTACIÓN (NUEVO)

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-vpc" }]

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-igw" }]

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  # SUBREDES
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetACIDR
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-public-a" }]

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetBCIDR
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-public-b" }]

  AppSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref AppSubnetACIDR
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-app-a" }]

  AppSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref AppSubnetBCIDR
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-app-b" }]

  DBSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref DBSubnetACIDR
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-db-a" }]

  DBSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref DBSubnetBCIDR
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-db-b" }]

  # TABLAS DE ENRUTAMIENTO
  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-public-rt" }]

  PublicRTDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  AssocPublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRT

  AssocPublicB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRT

  # NAT
  NatEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGw:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEip.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-nat" }]

  AppRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-app-rt" }]

  AppRTDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref AppRT
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGw

  AssocAppA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppSubnetA
      RouteTableId: !Ref AppRT

  AssocAppB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppSubnetB
      RouteTableId: !Ref AppRT

  DBRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-db-rt" }]

  DBRTDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref DBRT
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGw

  AssocDBA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DBSubnetA
      RouteTableId: !Ref DBRT

  AssocDBB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DBSubnetB
      RouteTableId: !Ref DBRT

  # ENDPOINTS VPC
  VPCEndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcEndpointType: Gateway
      RouteTableIds: [!Ref AppRT, !Ref DBRT]

  EndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for Interface Endpoints
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-vpce-sg" }]

  VPCEndpointSecrets:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      VpcEndpointType: Interface
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      PrivateDnsEnabled: true
      SubnetIds: [!Ref AppSubnetA, !Ref AppSubnetB]
      SecurityGroupIds: [!Ref EndpointSG]

  # GRUPOS DE SEGURIDAD
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB public ingress 443
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: HTTPS desde Internet
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-alb-sg" }]

  AppSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Backend only from ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: App port from ALB
          IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref ALBSG
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-app-sg" }]

  DBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DB only from App
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: DB from AppSG
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref AppSG
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-db-sg" }]

  # NACLs
  AppNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags: [{ Key: Name, Value: !Sub "${ProjectName}-app-nacl" }]

  AppNACLInboundAllowEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: 100
      Protocol: 6    
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 1024, To: 65535 }

  AppNACLInboundDenyTelnet:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: deny
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 23, To: 23 }

  AppNACLOutboundAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  AssocAppNaclA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref AppSubnetA
      NetworkAclId: !Ref AppNACL

  AssocAppNaclB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref AppSubnetB
      NetworkAclId: !Ref AppNACL

# OUTPUTS 

Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref VPC
  PublicSubnets:
    Description: Subredes públicas (ALB/Perímetro)
    Value: !Join [",", [!Ref PublicSubnetA, !Ref PublicSubnetB]]
  AppSubnets:
    Description: Subredes privadas de aplicación
    Value: !Join [",", [!Ref AppSubnetA, !Ref AppSubnetB]]
  DBSubnets:
    Description: Subredes privadas de base de datos
    Value: !Join [",", [!Ref DBSubnetA, !Ref DBSubnetB]]
  ALBSGId:
    Description: SG del ALB
    Value: !Ref ALBSG
  AppSGId:
    Description: SG de la App
    Value: !Ref AppSG
  DBSGId:
    Description: SG de la DB
    Value: !Ref DBSG

  FrontendBucketName:
    Description: Nombre del bucket S3 para el frontend
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub "${AWS::StackName}-FrontendBucketName"

  CloudFrontDistributionId:
    Description: ID de la distribución CloudFront
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub "${AWS::StackName}-CloudFrontDistributionId"

  CloudFrontDomainName:
    Description: Nombre de dominio de la distribución CloudFront
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub "${AWS::StackName}-CloudFrontDomainName"

  EspaciosTableName:
    Description: Nombre de la tabla DynamoDB para espacios
    Value: !Ref EspaciosTable
    Export:
      Name: !Sub "${AWS::StackName}-EspaciosTableName"

  WebSocketConnectionsTableName:
    Description: Nombre de la tabla DynamoDB para conexiones WebSocket
    Value: !Ref WebSocketConnectionsTable
    Export:
      Name: !Sub "${AWS::StackName}-WebSocketConnectionsTableName"

  LambdaRoleName:
    Description: Nombre del rol IAM para funciones Lambda
    Value: !Ref LambdaExecutionRole
    Export:
      Name: !Sub "${AWS::StackName}-LambdaRoleName"
